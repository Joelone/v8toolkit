bidirectional Factory objects need to be wrapped so they can be used from javascript, not just have their objects
passed back from c++ helpers

Debugging support - looks like there are packages out there for integrating it with chrome for debugging



Building with gn:
fresh computer:
fetch v8

existing computer:
rm -rf v8
gclient sync (from $HOME)


No support for pointer to l/r-value ref qualified member function


Need to change debugging to use v8's built-in debugging


constructors don't support default arguments yet
 - fairly difficult to route the parameters through


ClassParser:
-------------


FEATURE: std::function default parameters are not supported - ignored with warning message
 - cast to js then back to native trick doesn't work for them because there's no casttojs for them






Need to make sure to get include files for constructor input parameter types
 - it looks like we are, but it's not showing up in the output file for GroundRegionCollection's constructor:
   -     class_wrapper.add_constructor<class Map &, class GroundRegion &&>("GroundRegionCollection", isolate);
Logs:
Went from class Map & to class Map
is not a FUNCTION TYPE
0x137572e0Got include string for class Map: "map.h"
GroundRegionCollection now has 9 include files having added "map.h"


constructors don't take default arguments and once they do, it needs to be added to class_parser

Bidirectional types without a specified bidirectional constructor aren't properly setting an error - or error isn't being
  looked at - program crashes when trying to write out the null constructor later (right after log message cc3 is printed)


BUG: ClassParser generates code for multiple constructors with the same name -- also puts an extra newline after each constructor
       instead of only after last one

TRIVIAL: ClassParser generated code - expose_static_methods indentation is off:

           class_wrapper.finalize(true);
   class_wrapper.expose_static_methods("InputEvent", isolate);



Add support for enums.  Here is sample code for how to get enums from a CXXRecordDecl:

 for(auto & childdecl : record_decl->decls()) {
        if (auto enum_decl = dyn_cast<EnumDecl>(childdecl)) {
            // prints name of enum class
            std::cerr << fmt::format("enum decl name: {}", enum_decl->getName().str()) << std::endl;
            for(auto enumerator : enum_decl->enumerators()) {
                // prints the name of each value in the enum
                std::cerr << fmt::format("Enumerator: {}", enumerator->getNameAsString(), enumerator->) << std::endl;
            }
        }
    }




Timings (user time):

on large complex bindings file, normal build took 1:03
With pretend template for all types:              0:03 <== no real code
without _add_method:                              0:52
without add_member:                               0:59
without add_fake_method:                          1:02
without add_named_property_handler:               1:00
without get_object_from_embedded_cpp_object:      0:57
without calls to CallCallable:                    0:55
 - and CallCallable bodies commented out:         0:54
Without all the above:                            0:52
 - without make_wrapping_function_template:       0:50
   - without get_cpp_object:                      0:50
     - wihtout cast or init_instance_object_template: 0:51

     giving up on tracking what I've taken out - just removing tons of stuff til it goes down significantly

lots of stuff, but still v8_constructor in place:  0:51
- without v8_constructor:                          0:50

REMOVING A BUNCH MORE STUFF:                       0:14 <=== WHAT HAPPENED HERE?
putting back get_instance:                         0:47

(trimmed some unused prints from get_instance)
full get_instance function:  46s
- only without wrapper_map lookup: 43s
- only without call to constructor: 19s
- without both above 2 things:    : 17s
- without if statement:             14s


With even more commented out, but with full get_instance, down to 23s.



Virtually everything commented out - no data members or functions except for get_instance:   4.4s
With data members back: 9.7s


map<string,v8::global> <== EXPENSIVE
vector<v8::global> <== cheap
eastl::vector_map <== much closer to cheap than expensive

unique_ptr is expensive

CHECK EVERYTHING THAT HAS TO DO WITH THESE - NOT UNIQUE_PTR ANYMORE
	TypeCheckerBase<T> * type_checker = nullptr; // std::unique_ptr adds too much compilation time
	WrapAsMostDerivedBase<T> * wrap_as_most_derived_object = nullptr; // std::unique_ptr adds too much compilation time


Need to try to make TypeChecker and WrapAsMostDerived to not use V8ClassWrapper objects to stop it from instantiating all of them





************ GO THROUGH GIT DIFF TO SEE WHAT HAS ACTUALLY CHANGED **************
 - it's convoluted because I moved around a bunch of stuff as well





 NEW DEBUGGER:

 Got it "working" except it doesn't do anything.   It responds to all the messages from chrome, but it doesn't actually
 expose anything.   I saw some things like "inspectable" and such that probably need to be subclassed or something
 but I don't have any references/samples that I've found yet to look at to see what to do.


 class parser should use V8TOOLKIT_USE_NAME for constructor name for class - not respecting that

 class parser not generating explicit templates for jswrapper types -- making extern types instead, which leads to
 linker errors for undefined symbols

class parser dropping pointer on default values for constructors