This is how I build it from inside the v8 directory.  Not very useful verbatim, but good for figuring something out based on your environmetn


// how I build under OS X
clang++ -std=c++14 -I/users/xaxxon/v8  sample.cpp -o h2 /users/xaxxon/v8/out/x64.release/{libv8_base.a,libv8_libbase.a,libicudata.a,libicuuc.a,libicui18n.a,libv8_base.a,libv8_external_snapshot.a,libv8_libplatform.a}




// This is how I have to build it under ubuntu
// remember, library order matters.   Things that depend on a symbol come before
//   things that resolve the symbol (important for libicu*.a)
g++ -std=c++14 -I/home/xaxxon/v8  sample.cpp -o h2 /home/xaxxon/v8/out/native/obj.target/tools/gyp/{libv8_base.a,libv8_libbase.a,libv8_base.a,libv8_external_snapshot.a,libv8_libplatform.a} /home/xaxxon/v8/out/native/obj.target/third_party/icu/libicu*.a /home/xaxxon/v8/out/native/obj.target/third_party/icu/{libicui18n.a,libicuuc.a,libicudata.a} -lpthread -ldl 


hint: Don't forget to copy in the v8 .bin files, too.





how to build v8:

git clone depot_tools and add it to your PATH

https://www.chromium.org/developers/how-tos/install-depot-tools



get v8 using depot tools:

https://github.com/v8/v8/wiki/Using%20Git

(may want to run gclient sync to update a failed fetch)

run "make native"

and then wait a long time



This is what I put in my .bash_profile for building on OS X.  The libc++ part is
very important or you'll get a ton of link failures for all of std::

export PATH=/Users/xaxxon/depot_tools:"$PATH"

export CXX="`which clang++` -std=c++11 -stdlib=libc++"
export CC="`which clang`"
export CPP="`which clang` -E"
export LINK="`which clang++` -std=c++11 -stdlib=libc++"
export CXX_host="`which clang++`"
export CC_host="`which clang`"
export CPP_host="`which clang` -E"
export LINK_host="`which clang++`"
export GYP_DEFINES="clang=1 mac_deployment_target=10.7"


Installing boost on os x, make sure to build for libc++ as well:

brew install boost --c++11



DELETE BELOW THIS:

javascript.h -- keep
v8_class_wrapper.h - keep template removal from LeaveAlone and removal of V8TOOLKIT_ENABLE_GENERATE_BINDINGS and
   deletion of add_method_for_const_type  change to add_method :

   +           if (!std::is_const<T>::value) {
   +               V8ClassWrapper<typename std::add_const<T>::type>::get_instance(isolate).add_method(method_name, method);
   +           }
   +           return _add_method(method_name, method);


